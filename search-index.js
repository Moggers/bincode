var searchIndex = {};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary\nserialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec&lt;T&gt;`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"hash","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"clone","","",3,null],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,null],[11,"try_take","","Tries to take the value out of this refbox.",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,null],[11,"as_ref","","",2,null],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,null],[11,"try_take","","Tries to take the value out of this refbox.",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,null],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec&lt;T&gt;` from a `SliceBox`.",3,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,null],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec&lt;T&gt;`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,null],[11,"try_take","","Tries to take the value out of this refbox.",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,null],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions\nthat use the `rustc_serialize` crate for the encodable and decodable\nimplementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",5,null],[12,"detail","","",5,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",6,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",6,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",7,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",7,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",7,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"cause","","",7,null],[11,"from","","",7,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",8,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",8,null],[11,"read_nil","","",8,null],[11,"read_usize","","",8,null],[11,"read_u64","","",8,null],[11,"read_u32","","",8,null],[11,"read_u16","","",8,null],[11,"read_u8","","",8,null],[11,"read_isize","","",8,null],[11,"read_i64","","",8,null],[11,"read_i32","","",8,null],[11,"read_i16","","",8,null],[11,"read_i8","","",8,null],[11,"read_bool","","",8,null],[11,"read_f64","","",8,null],[11,"read_f32","","",8,null],[11,"read_char","","",8,null],[11,"read_str","","",8,null],[11,"read_enum","","",8,null],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,null],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,null],[11,"read_struct","","",8,null],[11,"read_struct_field","","",8,null],[11,"read_tuple","","",8,null],[11,"read_tuple_arg","","",8,null],[11,"read_tuple_struct","","",8,null],[11,"read_tuple_struct_arg","","",8,null],[11,"read_option","","",8,null],[11,"read_seq","","",8,null],[11,"read_seq_elt","","",8,null],[11,"read_map","","",8,null],[11,"read_map_elt_key","","",8,null],[11,"read_map_elt_val","","",8,null],[11,"error","","",8,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"new","","",9,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",9,null],[11,"emit_usize","","",9,null],[11,"emit_u64","","",9,null],[11,"emit_u32","","",9,null],[11,"emit_u16","","",9,null],[11,"emit_u8","","",9,null],[11,"emit_isize","","",9,null],[11,"emit_i64","","",9,null],[11,"emit_i32","","",9,null],[11,"emit_i16","","",9,null],[11,"emit_i8","","",9,null],[11,"emit_bool","","",9,null],[11,"emit_f64","","",9,null],[11,"emit_f32","","",9,null],[11,"emit_char","","",9,null],[11,"emit_str","","",9,null],[11,"emit_enum","","",9,null],[11,"emit_enum_variant","","",9,null],[11,"emit_enum_variant_arg","","",9,null],[11,"emit_enum_struct_variant","","",9,null],[11,"emit_enum_struct_variant_field","","",9,null],[11,"emit_struct","","",9,null],[11,"emit_struct_field","","",9,null],[11,"emit_tuple","","",9,null],[11,"emit_tuple_arg","","",9,null],[11,"emit_tuple_struct","","",9,null],[11,"emit_tuple_struct_arg","","",9,null],[11,"emit_option","","",9,null],[11,"emit_option_none","","",9,null],[11,"emit_option_some","","",9,null],[11,"emit_seq","","",9,null],[11,"emit_seq_elt","","",9,null],[11,"emit_map","","",9,null],[11,"emit_map_elt_key","","",9,null],[11,"emit_map_elt_val","","",9,null],[11,"emit_nil","","",4,null],[11,"emit_usize","","",4,null],[11,"emit_u64","","",4,null],[11,"emit_u32","","",4,null],[11,"emit_u16","","",4,null],[11,"emit_u8","","",4,null],[11,"emit_isize","","",4,null],[11,"emit_i64","","",4,null],[11,"emit_i32","","",4,null],[11,"emit_i16","","",4,null],[11,"emit_i8","","",4,null],[11,"emit_bool","","",4,null],[11,"emit_f64","","",4,null],[11,"emit_f32","","",4,null],[11,"emit_char","","",4,null],[11,"emit_str","","",4,null],[11,"emit_enum","","",4,null],[11,"emit_enum_variant","","",4,null],[11,"emit_enum_variant_arg","","",4,null],[11,"emit_enum_struct_variant","","",4,null],[11,"emit_enum_struct_variant_field","","",4,null],[11,"emit_struct","","",4,null],[11,"emit_struct_field","","",4,null],[11,"emit_tuple","","",4,null],[11,"emit_tuple_arg","","",4,null],[11,"emit_tuple_struct","","",4,null],[11,"emit_tuple_struct_arg","","",4,null],[11,"emit_option","","",4,null],[11,"emit_option_none","","",4,null],[11,"emit_option_some","","",4,null],[11,"emit_seq","","",4,null],[11,"emit_seq_elt","","",4,null],[11,"emit_map","","",4,null],[11,"emit_map_elt_key","","",4,null],[11,"emit_map_elt_val","","",4,null],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions\nthat use the `serde` crate for the serializable and deserializable\nimplementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",10,null],[12,"detail","","",10,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",11,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",11,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",11,null],[13,"Custom","","",11,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",12,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",12,null],[13,"SequenceMustHaveLength","","",12,null],[13,"Custom","","A custom error message",12,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"cause","","",11,null],[11,"from","","",11,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",11,null],[11,"custom","","",11,{"inputs":[{"name":"t"}],"output":{"name":"deserializeerror"}}],[11,"new","","",13,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",13,null],[11,"fmt","","",12,null],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"new","","",14,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"clone","bincode","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[3,"InvalidEncoding"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[3,"InvalidEncoding"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["serde"] = {"doc":"# Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&amp;[u8]` and `Vec&lt;u8&gt;`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec&lt;u8&gt;` in order to serialize and deserialize in an efficient\nway.",null,null],[3,"Bytes","","Wraps a `&amp;[u8]` in order to serialize in an efficient way. Does not support\ndeserialization.",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"new","","Wrap an existing `&amp;[u8]`.",1,null],[11,"fmt","","",1,null],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,null],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor`\ntrait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that\nwas not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that\nwas not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not\nexpected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&amp;str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&amp;[u8]` or `Vec&lt;u8&gt;` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option&lt;T&gt;` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was\nnot expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,null],[11,"description","","",4,null],[11,"deserialize_bool","","",5,null],[11,"deserialize_u8","","",5,null],[11,"deserialize_u16","","",5,null],[11,"deserialize_u32","","",5,null],[11,"deserialize_u64","","",5,null],[11,"deserialize_i8","","",5,null],[11,"deserialize_i16","","",5,null],[11,"deserialize_i32","","",5,null],[11,"deserialize_i64","","",5,null],[11,"deserialize_f32","","",5,null],[11,"deserialize_f64","","",5,null],[11,"deserialize_char","","",5,null],[11,"deserialize_str","","",5,null],[11,"deserialize_string","","",5,null],[11,"deserialize_unit","","",5,null],[11,"deserialize_seq","","",5,null],[11,"deserialize_seq_fixed_size","","",5,null],[11,"deserialize_bytes","","",5,null],[11,"deserialize_map","","",5,null],[11,"deserialize_unit_struct","","",5,null],[11,"deserialize_newtype_struct","","",5,null],[11,"deserialize_tuple_struct","","",5,null],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,null],[11,"deserialize_tuple","","",5,null],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,null],[11,"deserialize_byte_buf","","",5,null],[11,"deserialize","","",5,null],[11,"deserialize_option","","",5,null],[11,"deserialize_bool","","",6,null],[11,"deserialize_u8","","",6,null],[11,"deserialize_u16","","",6,null],[11,"deserialize_u32","","",6,null],[11,"deserialize_u64","","",6,null],[11,"deserialize_i8","","",6,null],[11,"deserialize_i16","","",6,null],[11,"deserialize_i32","","",6,null],[11,"deserialize_i64","","",6,null],[11,"deserialize_f32","","",6,null],[11,"deserialize_f64","","",6,null],[11,"deserialize_char","","",6,null],[11,"deserialize_str","","",6,null],[11,"deserialize_string","","",6,null],[11,"deserialize_unit","","",6,null],[11,"deserialize_option","","",6,null],[11,"deserialize_seq","","",6,null],[11,"deserialize_seq_fixed_size","","",6,null],[11,"deserialize_bytes","","",6,null],[11,"deserialize_map","","",6,null],[11,"deserialize_unit_struct","","",6,null],[11,"deserialize_newtype_struct","","",6,null],[11,"deserialize_tuple_struct","","",6,null],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,null],[11,"deserialize_tuple","","",6,null],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,null],[11,"deserialize_byte_buf","","",6,null],[11,"deserialize","","",6,null],[11,"deserialize_bool","","",7,null],[11,"deserialize_u8","","",7,null],[11,"deserialize_u16","","",7,null],[11,"deserialize_u32","","",7,null],[11,"deserialize_u64","","",7,null],[11,"deserialize_i8","","",7,null],[11,"deserialize_i16","","",7,null],[11,"deserialize_i32","","",7,null],[11,"deserialize_i64","","",7,null],[11,"deserialize_f32","","",7,null],[11,"deserialize_f64","","",7,null],[11,"deserialize_char","","",7,null],[11,"deserialize_str","","",7,null],[11,"deserialize_string","","",7,null],[11,"deserialize_unit","","",7,null],[11,"deserialize_option","","",7,null],[11,"deserialize_seq","","",7,null],[11,"deserialize_seq_fixed_size","","",7,null],[11,"deserialize_bytes","","",7,null],[11,"deserialize_map","","",7,null],[11,"deserialize_unit_struct","","",7,null],[11,"deserialize_newtype_struct","","",7,null],[11,"deserialize_tuple_struct","","",7,null],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,null],[11,"deserialize_tuple","","",7,null],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,null],[11,"deserialize_byte_buf","","",7,null],[11,"deserialize","","",7,null],[11,"deserialize_bool","","",8,null],[11,"deserialize_u8","","",8,null],[11,"deserialize_u16","","",8,null],[11,"deserialize_u32","","",8,null],[11,"deserialize_u64","","",8,null],[11,"deserialize_i8","","",8,null],[11,"deserialize_i16","","",8,null],[11,"deserialize_i32","","",8,null],[11,"deserialize_i64","","",8,null],[11,"deserialize_f32","","",8,null],[11,"deserialize_f64","","",8,null],[11,"deserialize_char","","",8,null],[11,"deserialize_str","","",8,null],[11,"deserialize_string","","",8,null],[11,"deserialize_unit","","",8,null],[11,"deserialize_option","","",8,null],[11,"deserialize_seq","","",8,null],[11,"deserialize_seq_fixed_size","","",8,null],[11,"deserialize_bytes","","",8,null],[11,"deserialize_map","","",8,null],[11,"deserialize_unit_struct","","",8,null],[11,"deserialize_newtype_struct","","",8,null],[11,"deserialize_tuple_struct","","",8,null],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,null],[11,"deserialize_tuple","","",8,null],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,null],[11,"deserialize_byte_buf","","",8,null],[11,"deserialize","","",8,null],[11,"deserialize_bool","","",9,null],[11,"deserialize_u8","","",9,null],[11,"deserialize_u16","","",9,null],[11,"deserialize_u32","","",9,null],[11,"deserialize_u64","","",9,null],[11,"deserialize_i8","","",9,null],[11,"deserialize_i16","","",9,null],[11,"deserialize_i32","","",9,null],[11,"deserialize_i64","","",9,null],[11,"deserialize_f32","","",9,null],[11,"deserialize_f64","","",9,null],[11,"deserialize_char","","",9,null],[11,"deserialize_str","","",9,null],[11,"deserialize_string","","",9,null],[11,"deserialize_unit","","",9,null],[11,"deserialize_option","","",9,null],[11,"deserialize_seq","","",9,null],[11,"deserialize_seq_fixed_size","","",9,null],[11,"deserialize_bytes","","",9,null],[11,"deserialize_map","","",9,null],[11,"deserialize_unit_struct","","",9,null],[11,"deserialize_newtype_struct","","",9,null],[11,"deserialize_tuple_struct","","",9,null],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,null],[11,"deserialize_tuple","","",9,null],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,null],[11,"deserialize_byte_buf","","",9,null],[11,"deserialize","","",9,null],[11,"deserialize_bool","","",10,null],[11,"deserialize_u8","","",10,null],[11,"deserialize_u16","","",10,null],[11,"deserialize_u32","","",10,null],[11,"deserialize_u64","","",10,null],[11,"deserialize_i8","","",10,null],[11,"deserialize_i16","","",10,null],[11,"deserialize_i32","","",10,null],[11,"deserialize_i64","","",10,null],[11,"deserialize_f32","","",10,null],[11,"deserialize_f64","","",10,null],[11,"deserialize_char","","",10,null],[11,"deserialize_str","","",10,null],[11,"deserialize_string","","",10,null],[11,"deserialize_unit","","",10,null],[11,"deserialize_option","","",10,null],[11,"deserialize_seq","","",10,null],[11,"deserialize_seq_fixed_size","","",10,null],[11,"deserialize_bytes","","",10,null],[11,"deserialize_map","","",10,null],[11,"deserialize_unit_struct","","",10,null],[11,"deserialize_newtype_struct","","",10,null],[11,"deserialize_tuple_struct","","",10,null],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,null],[11,"deserialize_tuple","","",10,null],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,null],[11,"deserialize_byte_buf","","",10,null],[11,"deserialize","","",10,null],[11,"deserialize_bool","","",11,null],[11,"deserialize_u8","","",11,null],[11,"deserialize_u16","","",11,null],[11,"deserialize_u32","","",11,null],[11,"deserialize_u64","","",11,null],[11,"deserialize_i8","","",11,null],[11,"deserialize_i16","","",11,null],[11,"deserialize_i32","","",11,null],[11,"deserialize_i64","","",11,null],[11,"deserialize_f32","","",11,null],[11,"deserialize_f64","","",11,null],[11,"deserialize_char","","",11,null],[11,"deserialize_str","","",11,null],[11,"deserialize_string","","",11,null],[11,"deserialize_unit","","",11,null],[11,"deserialize_option","","",11,null],[11,"deserialize_seq","","",11,null],[11,"deserialize_seq_fixed_size","","",11,null],[11,"deserialize_bytes","","",11,null],[11,"deserialize_map","","",11,null],[11,"deserialize_unit_struct","","",11,null],[11,"deserialize_newtype_struct","","",11,null],[11,"deserialize_tuple_struct","","",11,null],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,null],[11,"deserialize_tuple","","",11,null],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,null],[11,"deserialize_byte_buf","","",11,null],[11,"deserialize","","",11,null],[11,"deserialize_bool","","",12,null],[11,"deserialize_u8","","",12,null],[11,"deserialize_u16","","",12,null],[11,"deserialize_u32","","",12,null],[11,"deserialize_u64","","",12,null],[11,"deserialize_i8","","",12,null],[11,"deserialize_i16","","",12,null],[11,"deserialize_i32","","",12,null],[11,"deserialize_i64","","",12,null],[11,"deserialize_f32","","",12,null],[11,"deserialize_f64","","",12,null],[11,"deserialize_char","","",12,null],[11,"deserialize_str","","",12,null],[11,"deserialize_string","","",12,null],[11,"deserialize_unit","","",12,null],[11,"deserialize_option","","",12,null],[11,"deserialize_seq","","",12,null],[11,"deserialize_seq_fixed_size","","",12,null],[11,"deserialize_bytes","","",12,null],[11,"deserialize_map","","",12,null],[11,"deserialize_unit_struct","","",12,null],[11,"deserialize_newtype_struct","","",12,null],[11,"deserialize_tuple_struct","","",12,null],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,null],[11,"deserialize_tuple","","",12,null],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,null],[11,"deserialize_byte_buf","","",12,null],[11,"deserialize","","",12,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,null],[11,"deserialize_byte_buf","","",13,null],[11,"deserialize","","",13,null],[11,"deserialize_bool","","",14,null],[11,"deserialize_u8","","",14,null],[11,"deserialize_u16","","",14,null],[11,"deserialize_u32","","",14,null],[11,"deserialize_u64","","",14,null],[11,"deserialize_i8","","",14,null],[11,"deserialize_i16","","",14,null],[11,"deserialize_i32","","",14,null],[11,"deserialize_i64","","",14,null],[11,"deserialize_f32","","",14,null],[11,"deserialize_f64","","",14,null],[11,"deserialize_char","","",14,null],[11,"deserialize_str","","",14,null],[11,"deserialize_string","","",14,null],[11,"deserialize_unit","","",14,null],[11,"deserialize_option","","",14,null],[11,"deserialize_seq","","",14,null],[11,"deserialize_seq_fixed_size","","",14,null],[11,"deserialize_bytes","","",14,null],[11,"deserialize_map","","",14,null],[11,"deserialize_unit_struct","","",14,null],[11,"deserialize_newtype_struct","","",14,null],[11,"deserialize_tuple_struct","","",14,null],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,null],[11,"deserialize_tuple","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,null],[11,"deserialize_byte_buf","","",14,null],[11,"deserialize","","",14,null],[11,"deserialize_bool","","",15,null],[11,"deserialize_u8","","",15,null],[11,"deserialize_u16","","",15,null],[11,"deserialize_u32","","",15,null],[11,"deserialize_u64","","",15,null],[11,"deserialize_i8","","",15,null],[11,"deserialize_i16","","",15,null],[11,"deserialize_i32","","",15,null],[11,"deserialize_i64","","",15,null],[11,"deserialize_f32","","",15,null],[11,"deserialize_f64","","",15,null],[11,"deserialize_char","","",15,null],[11,"deserialize_str","","",15,null],[11,"deserialize_string","","",15,null],[11,"deserialize_unit","","",15,null],[11,"deserialize_option","","",15,null],[11,"deserialize_seq","","",15,null],[11,"deserialize_seq_fixed_size","","",15,null],[11,"deserialize_bytes","","",15,null],[11,"deserialize_map","","",15,null],[11,"deserialize_unit_struct","","",15,null],[11,"deserialize_newtype_struct","","",15,null],[11,"deserialize_tuple_struct","","",15,null],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,null],[11,"deserialize_tuple","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,null],[11,"deserialize_byte_buf","","",15,null],[11,"deserialize","","",15,null],[11,"deserialize_bool","","",16,null],[11,"deserialize_u8","","",16,null],[11,"deserialize_u16","","",16,null],[11,"deserialize_u32","","",16,null],[11,"deserialize_u64","","",16,null],[11,"deserialize_i8","","",16,null],[11,"deserialize_i16","","",16,null],[11,"deserialize_i32","","",16,null],[11,"deserialize_i64","","",16,null],[11,"deserialize_f32","","",16,null],[11,"deserialize_f64","","",16,null],[11,"deserialize_char","","",16,null],[11,"deserialize_str","","",16,null],[11,"deserialize_string","","",16,null],[11,"deserialize_unit","","",16,null],[11,"deserialize_option","","",16,null],[11,"deserialize_seq","","",16,null],[11,"deserialize_seq_fixed_size","","",16,null],[11,"deserialize_bytes","","",16,null],[11,"deserialize_map","","",16,null],[11,"deserialize_unit_struct","","",16,null],[11,"deserialize_newtype_struct","","",16,null],[11,"deserialize_tuple_struct","","",16,null],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,null],[11,"deserialize_tuple","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,null],[11,"deserialize_byte_buf","","",16,null],[11,"deserialize","","",16,null],[11,"deserialize_bool","","",17,null],[11,"deserialize_u8","","",17,null],[11,"deserialize_u16","","",17,null],[11,"deserialize_u32","","",17,null],[11,"deserialize_u64","","",17,null],[11,"deserialize_i8","","",17,null],[11,"deserialize_i16","","",17,null],[11,"deserialize_i32","","",17,null],[11,"deserialize_i64","","",17,null],[11,"deserialize_f32","","",17,null],[11,"deserialize_f64","","",17,null],[11,"deserialize_char","","",17,null],[11,"deserialize_str","","",17,null],[11,"deserialize_string","","",17,null],[11,"deserialize_unit","","",17,null],[11,"deserialize_option","","",17,null],[11,"deserialize_seq","","",17,null],[11,"deserialize_seq_fixed_size","","",17,null],[11,"deserialize_bytes","","",17,null],[11,"deserialize_map","","",17,null],[11,"deserialize_unit_struct","","",17,null],[11,"deserialize_newtype_struct","","",17,null],[11,"deserialize_tuple_struct","","",17,null],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,null],[11,"deserialize_tuple","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,null],[11,"deserialize_byte_buf","","",17,null],[11,"deserialize","","",17,null],[11,"deserialize_bool","","",18,null],[11,"deserialize_u8","","",18,null],[11,"deserialize_u16","","",18,null],[11,"deserialize_u32","","",18,null],[11,"deserialize_u64","","",18,null],[11,"deserialize_i8","","",18,null],[11,"deserialize_i16","","",18,null],[11,"deserialize_i32","","",18,null],[11,"deserialize_i64","","",18,null],[11,"deserialize_f32","","",18,null],[11,"deserialize_f64","","",18,null],[11,"deserialize_char","","",18,null],[11,"deserialize_str","","",18,null],[11,"deserialize_string","","",18,null],[11,"deserialize_unit","","",18,null],[11,"deserialize_option","","",18,null],[11,"deserialize_seq","","",18,null],[11,"deserialize_seq_fixed_size","","",18,null],[11,"deserialize_bytes","","",18,null],[11,"deserialize_map","","",18,null],[11,"deserialize_unit_struct","","",18,null],[11,"deserialize_newtype_struct","","",18,null],[11,"deserialize_tuple_struct","","",18,null],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,null],[11,"deserialize_tuple","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,null],[11,"deserialize_byte_buf","","",18,null],[11,"deserialize","","",18,null],[11,"deserialize_bool","","",19,null],[11,"deserialize_u8","","",19,null],[11,"deserialize_u16","","",19,null],[11,"deserialize_u32","","",19,null],[11,"deserialize_u64","","",19,null],[11,"deserialize_i8","","",19,null],[11,"deserialize_i16","","",19,null],[11,"deserialize_i32","","",19,null],[11,"deserialize_i64","","",19,null],[11,"deserialize_f32","","",19,null],[11,"deserialize_f64","","",19,null],[11,"deserialize_char","","",19,null],[11,"deserialize_str","","",19,null],[11,"deserialize_string","","",19,null],[11,"deserialize_unit","","",19,null],[11,"deserialize_option","","",19,null],[11,"deserialize_seq","","",19,null],[11,"deserialize_seq_fixed_size","","",19,null],[11,"deserialize_bytes","","",19,null],[11,"deserialize_map","","",19,null],[11,"deserialize_unit_struct","","",19,null],[11,"deserialize_newtype_struct","","",19,null],[11,"deserialize_tuple_struct","","",19,null],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,null],[11,"deserialize_tuple","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_ignored_any","","",19,null],[11,"deserialize_byte_buf","","",19,null],[11,"deserialize","","",19,null],[11,"deserialize","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,null],[11,"deserialize_u8","","",20,null],[11,"deserialize_u16","","",20,null],[11,"deserialize_u32","","",20,null],[11,"deserialize_u64","","",20,null],[11,"deserialize_i8","","",20,null],[11,"deserialize_i16","","",20,null],[11,"deserialize_i32","","",20,null],[11,"deserialize_i64","","",20,null],[11,"deserialize_f32","","",20,null],[11,"deserialize_f64","","",20,null],[11,"deserialize_char","","",20,null],[11,"deserialize_str","","",20,null],[11,"deserialize_string","","",20,null],[11,"deserialize_unit","","",20,null],[11,"deserialize_option","","",20,null],[11,"deserialize_seq","","",20,null],[11,"deserialize_seq_fixed_size","","",20,null],[11,"deserialize_bytes","","",20,null],[11,"deserialize_map","","",20,null],[11,"deserialize_unit_struct","","",20,null],[11,"deserialize_newtype_struct","","",20,null],[11,"deserialize_tuple_struct","","",20,null],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,null],[11,"deserialize_tuple","","",20,null],[11,"deserialize_ignored_any","","",20,null],[11,"deserialize_byte_buf","","",20,null],[11,"visit_variant_seed","","",20,null],[11,"deserialize","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,null],[11,"deserialize_u8","","",21,null],[11,"deserialize_u16","","",21,null],[11,"deserialize_u32","","",21,null],[11,"deserialize_u64","","",21,null],[11,"deserialize_i8","","",21,null],[11,"deserialize_i16","","",21,null],[11,"deserialize_i32","","",21,null],[11,"deserialize_i64","","",21,null],[11,"deserialize_f32","","",21,null],[11,"deserialize_f64","","",21,null],[11,"deserialize_char","","",21,null],[11,"deserialize_str","","",21,null],[11,"deserialize_string","","",21,null],[11,"deserialize_unit","","",21,null],[11,"deserialize_option","","",21,null],[11,"deserialize_seq","","",21,null],[11,"deserialize_seq_fixed_size","","",21,null],[11,"deserialize_bytes","","",21,null],[11,"deserialize_map","","",21,null],[11,"deserialize_unit_struct","","",21,null],[11,"deserialize_newtype_struct","","",21,null],[11,"deserialize_tuple_struct","","",21,null],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,null],[11,"deserialize_tuple","","",21,null],[11,"deserialize_ignored_any","","",21,null],[11,"deserialize_byte_buf","","",21,null],[11,"visit_variant_seed","","",21,null],[11,"deserialize","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,null],[11,"deserialize_u8","","",22,null],[11,"deserialize_u16","","",22,null],[11,"deserialize_u32","","",22,null],[11,"deserialize_u64","","",22,null],[11,"deserialize_i8","","",22,null],[11,"deserialize_i16","","",22,null],[11,"deserialize_i32","","",22,null],[11,"deserialize_i64","","",22,null],[11,"deserialize_f32","","",22,null],[11,"deserialize_f64","","",22,null],[11,"deserialize_char","","",22,null],[11,"deserialize_str","","",22,null],[11,"deserialize_string","","",22,null],[11,"deserialize_unit","","",22,null],[11,"deserialize_option","","",22,null],[11,"deserialize_seq","","",22,null],[11,"deserialize_seq_fixed_size","","",22,null],[11,"deserialize_bytes","","",22,null],[11,"deserialize_map","","",22,null],[11,"deserialize_unit_struct","","",22,null],[11,"deserialize_newtype_struct","","",22,null],[11,"deserialize_tuple_struct","","",22,null],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,null],[11,"deserialize_tuple","","",22,null],[11,"deserialize_ignored_any","","",22,null],[11,"deserialize_byte_buf","","",22,null],[11,"visit_variant_seed","","",22,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",23,null],[11,"deserialize_bool","","",23,null],[11,"deserialize_u8","","",23,null],[11,"deserialize_u16","","",23,null],[11,"deserialize_u32","","",23,null],[11,"deserialize_u64","","",23,null],[11,"deserialize_i8","","",23,null],[11,"deserialize_i16","","",23,null],[11,"deserialize_i32","","",23,null],[11,"deserialize_i64","","",23,null],[11,"deserialize_f32","","",23,null],[11,"deserialize_f64","","",23,null],[11,"deserialize_char","","",23,null],[11,"deserialize_str","","",23,null],[11,"deserialize_string","","",23,null],[11,"deserialize_unit","","",23,null],[11,"deserialize_option","","",23,null],[11,"deserialize_seq","","",23,null],[11,"deserialize_seq_fixed_size","","",23,null],[11,"deserialize_bytes","","",23,null],[11,"deserialize_map","","",23,null],[11,"deserialize_unit_struct","","",23,null],[11,"deserialize_newtype_struct","","",23,null],[11,"deserialize_tuple_struct","","",23,null],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,null],[11,"deserialize_tuple","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,null],[11,"deserialize_byte_buf","","",23,null],[11,"visit_seed","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,null],[11,"deserialize_bool","","",24,null],[11,"deserialize_u8","","",24,null],[11,"deserialize_u16","","",24,null],[11,"deserialize_u32","","",24,null],[11,"deserialize_u64","","",24,null],[11,"deserialize_i8","","",24,null],[11,"deserialize_i16","","",24,null],[11,"deserialize_i32","","",24,null],[11,"deserialize_i64","","",24,null],[11,"deserialize_f32","","",24,null],[11,"deserialize_f64","","",24,null],[11,"deserialize_char","","",24,null],[11,"deserialize_str","","",24,null],[11,"deserialize_string","","",24,null],[11,"deserialize_unit","","",24,null],[11,"deserialize_option","","",24,null],[11,"deserialize_seq","","",24,null],[11,"deserialize_seq_fixed_size","","",24,null],[11,"deserialize_bytes","","",24,null],[11,"deserialize_map","","",24,null],[11,"deserialize_unit_struct","","",24,null],[11,"deserialize_newtype_struct","","",24,null],[11,"deserialize_tuple_struct","","",24,null],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,null],[11,"deserialize_tuple","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,null],[11,"deserialize_byte_buf","","",24,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",25,null],[11,"deserialize_seq","","",25,null],[11,"deserialize_seq_fixed_size","","",25,null],[11,"deserialize_bool","","",25,null],[11,"deserialize_u8","","",25,null],[11,"deserialize_u16","","",25,null],[11,"deserialize_u32","","",25,null],[11,"deserialize_u64","","",25,null],[11,"deserialize_i8","","",25,null],[11,"deserialize_i16","","",25,null],[11,"deserialize_i32","","",25,null],[11,"deserialize_i64","","",25,null],[11,"deserialize_f32","","",25,null],[11,"deserialize_f64","","",25,null],[11,"deserialize_char","","",25,null],[11,"deserialize_str","","",25,null],[11,"deserialize_string","","",25,null],[11,"deserialize_unit","","",25,null],[11,"deserialize_option","","",25,null],[11,"deserialize_bytes","","",25,null],[11,"deserialize_map","","",25,null],[11,"deserialize_unit_struct","","",25,null],[11,"deserialize_newtype_struct","","",25,null],[11,"deserialize_tuple_struct","","",25,null],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,null],[11,"deserialize_tuple","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,null],[11,"deserialize_byte_buf","","",25,null],[11,"visit_key_seed","","",25,null],[11,"visit_value_seed","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,null],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,null],[11,"deserialize_bool","","",26,null],[11,"deserialize_u8","","",26,null],[11,"deserialize_u16","","",26,null],[11,"deserialize_u32","","",26,null],[11,"deserialize_u64","","",26,null],[11,"deserialize_i8","","",26,null],[11,"deserialize_i16","","",26,null],[11,"deserialize_i32","","",26,null],[11,"deserialize_i64","","",26,null],[11,"deserialize_f32","","",26,null],[11,"deserialize_f64","","",26,null],[11,"deserialize_char","","",26,null],[11,"deserialize_str","","",26,null],[11,"deserialize_string","","",26,null],[11,"deserialize_unit","","",26,null],[11,"deserialize_option","","",26,null],[11,"deserialize_seq","","",26,null],[11,"deserialize_seq_fixed_size","","",26,null],[11,"deserialize_bytes","","",26,null],[11,"deserialize_map","","",26,null],[11,"deserialize_unit_struct","","",26,null],[11,"deserialize_newtype_struct","","",26,null],[11,"deserialize_tuple_struct","","",26,null],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,null],[11,"deserialize_tuple","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,null],[11,"deserialize_byte_buf","","",26,null],[11,"into_deserializer","serde::bytes","",1,null],[11,"deserialize","serde::de::value","",27,null],[11,"deserialize_bool","","",27,null],[11,"deserialize_u8","","",27,null],[11,"deserialize_u16","","",27,null],[11,"deserialize_u32","","",27,null],[11,"deserialize_u64","","",27,null],[11,"deserialize_i8","","",27,null],[11,"deserialize_i16","","",27,null],[11,"deserialize_i32","","",27,null],[11,"deserialize_i64","","",27,null],[11,"deserialize_f32","","",27,null],[11,"deserialize_f64","","",27,null],[11,"deserialize_char","","",27,null],[11,"deserialize_str","","",27,null],[11,"deserialize_string","","",27,null],[11,"deserialize_unit","","",27,null],[11,"deserialize_option","","",27,null],[11,"deserialize_seq","","",27,null],[11,"deserialize_seq_fixed_size","","",27,null],[11,"deserialize_bytes","","",27,null],[11,"deserialize_map","","",27,null],[11,"deserialize_unit_struct","","",27,null],[11,"deserialize_newtype_struct","","",27,null],[11,"deserialize_tuple_struct","","",27,null],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,null],[11,"deserialize_tuple","","",27,null],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,null],[11,"deserialize_byte_buf","","",27,null],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,null],[11,"deserialize_bool","","",28,null],[11,"deserialize_u8","","",28,null],[11,"deserialize_u16","","",28,null],[11,"deserialize_u32","","",28,null],[11,"deserialize_u64","","",28,null],[11,"deserialize_i8","","",28,null],[11,"deserialize_i16","","",28,null],[11,"deserialize_i32","","",28,null],[11,"deserialize_i64","","",28,null],[11,"deserialize_f32","","",28,null],[11,"deserialize_f64","","",28,null],[11,"deserialize_char","","",28,null],[11,"deserialize_str","","",28,null],[11,"deserialize_string","","",28,null],[11,"deserialize_unit","","",28,null],[11,"deserialize_option","","",28,null],[11,"deserialize_seq","","",28,null],[11,"deserialize_seq_fixed_size","","",28,null],[11,"deserialize_bytes","","",28,null],[11,"deserialize_map","","",28,null],[11,"deserialize_unit_struct","","",28,null],[11,"deserialize_newtype_struct","","",28,null],[11,"deserialize_tuple_struct","","",28,null],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,null],[11,"deserialize_tuple","","",28,null],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,null],[11,"deserialize_byte_buf","","",28,null],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive\nerror messages belonging to the `Deserializer` against which they are\ncurrently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was\nexpecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that\nis wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains\ntoo many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an\nunrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an\nunrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required\nfield with a particular name but that field was not present in the\ninput.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting\nto receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as\nthe `Display` and `Debug` traits.",30,null],[8,"Deserialize","","An implementation of this trait is a **data structure** that can be\ndeserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you\never find yourself looking for a way to pass data into a `Deserialize` impl,\nthis trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except\nwith some initial piece of data (the seed) passed in.",32,null],[8,"Deserializer","","An implementation of this trait is a **data format** that can deserialize\nany data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based\non what data type is in the input.",33,null],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,null],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,null],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,null],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,null],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,null],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,null],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,null],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,null],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,null],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,null],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,null],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,null],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does\nnot benefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would\nbenefit from taking ownership of buffered data owned by the\n`Deserializer`.",33,null],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,null],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,null],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a\nparticular name.",33,null],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a\nparticular name.",33,null],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,null],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and\nknows how many values there are without looking at the serialized data.",33,null],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a\nparticular number of elements.",33,null],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a\nparticular name and number of fields.",33,null],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,null],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular\nname and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct\nfield.",33,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a\nparticular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",33,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,null],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,null],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,null],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,null],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,null],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,null],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,null],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,null],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,null],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,null],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,null],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,null],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,null],[11,"visit_str","","Deserialize a `&amp;str` into a `Value`.",34,null],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,null],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,null],[11,"visit_none","","Deserialize an absent optional `Value`.",34,null],[11,"visit_some","","Deserialize a present optional `Value`.",34,null],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,null],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,null],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,null],[11,"visit_enum","","Deserialize `Value` as an enum.",34,null],[11,"visit_bytes","","Deserialize a `&amp;[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec&lt;u8&gt;` into a `Value`.",34,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or\n`Ok(None)` if there are no more remaining items.",35,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)`\nif there are no more remaining entries.",36,null],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,null],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in\nthe map, or `Ok(None)` if there are no more remaining items.",36,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed\nto the `Deserialize` in order to identify which variant of an enum to\ndeserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum\nvariant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,null],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and\npassed to the `Deserialize` to deserialize the content of a particular enum\nvariant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during\ndeserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,null],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,null],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,null],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,null],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",30,null],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support\nserializing one of the compound types.",null,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_element","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_key","","",39,null],[11,"serialize_value","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[11,"serialize_field","","",39,null],[11,"end","","",39,null],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors\nbelonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error\nwhile serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","An implementation of this trait is a **data structure** that can be\nserialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,null],[8,"Serializer","","An implementation of this trait is a **data format** that can serialize any\ndata structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful\nserialization. Most serializers that produce text or binary output\nshould set `Ok = ()` and serialize into an `io::Write` or buffer\ncontained within the `Serializer` instance. Serializers that build\nin-memory data structures may be simplified by using `Ok` to propagate\nthe data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for\nserializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the\ntuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content\nof the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content\nof the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the\nmap.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the\nstruct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the\ncontent of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,null],[10,"serialize_i8","","Serialize an `i8` value.",42,null],[10,"serialize_i16","","Serialize an `i16` value.",42,null],[10,"serialize_i32","","Serialize an `i32` value.",42,null],[10,"serialize_i64","","Serialize an `i64` value.",42,null],[10,"serialize_u8","","Serialize a `u8` value.",42,null],[10,"serialize_u16","","Serialize a `u16` value.",42,null],[10,"serialize_u32","","Serialize a `u32` value.",42,null],[10,"serialize_u64","","Serialize a `u64` value.",42,null],[10,"serialize_f32","","Serialize an `f32` value.",42,null],[10,"serialize_f64","","Serialize an `f64` value.",42,null],[10,"serialize_char","","Serialize a character.",42,null],[10,"serialize_str","","Serialize a `&amp;str`.",42,null],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,null],[10,"serialize_some","","Serialize a `Some(T)` value.",42,null],[10,"serialize_unit","","Serialize a `()` value.",42,null],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData&lt;T&gt;`.",42,null],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,null],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,null],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,null],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be\nfollowed by zero or more calls to `serialize_element`, then a call to\n`end`.",42,null],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be\nknown at deserialization time without looking at the serialized data.\nThis call must be followed by zero or more calls to `serialize_element`,\nthen a call to `end`.",42,null],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_field`, then a call to `end`.",42,null],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This\ncall must be followed by zero or more calls to `serialize_field`, then a\ncall to `end`.",42,null],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8)\n}`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more\ncalls to `serialize_key` and `serialize_value`, then a call to `end`.",42,null],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`.\nThis call must be followed by zero or more calls to `serialize_field`,\nthen a call to `end`.",42,null],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8,\ng: u8, b: u8 } }`. This call must be followed by zero or more calls to\n`serialize_field`, then a call to `end`.",42,null],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and\n`Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,null],[10,"end","","Finish serializing a sequence.",43,null],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,null],[10,"end","","Finish serializing a tuple.",44,null],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,null],[10,"end","","Finish serializing a tuple struct.",45,null],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,null],[10,"end","","Finish serializing a tuple variant.",46,null],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,null],[10,"serialize_value","","Serialize a map value.",47,null],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,null],[10,"end","","Finish serializing a map.",47,null],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,null],[10,"end","","Finish serializing a struct.",48,null],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,null],[10,"end","","Finish serializing a struct variant.",49,null],[14,"forward_to_deserialize","serde","Helper macro when implementing the `Deserializer` part of a new data format\nfor Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"hash","","",3,null],[11,"cmp","","",3,null],[11,"eq","","",3,null],[11,"partial_cmp","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"hash","","",4,null],[11,"cmp","","",4,null],[11,"eq","","",4,null],[11,"partial_cmp","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector.\nReturns None otherwise.",9,null],[11,"into_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,null],[10,"read_usize","","Read a usize value.",25,null],[10,"read_u64","","Read a u64 value.",25,null],[10,"read_u32","","Read a u32 value.",25,null],[10,"read_u16","","Read a u16 value.",25,null],[10,"read_u8","","Read a u8 value.",25,null],[10,"read_isize","","Read a isize value.",25,null],[10,"read_i64","","Read a i64 value.",25,null],[10,"read_i32","","Read a i32 value.",25,null],[10,"read_i16","","Read a i16 value.",25,null],[10,"read_i8","","Read a i8 value.",25,null],[10,"read_bool","","Read a bool value.",25,null],[10,"read_f64","","Read a f64 value.",25,null],[10,"read_f32","","Read a f32 value.",25,null],[10,"read_char","","Read a char value.",25,null],[10,"read_str","","Read a string value.",25,null],[10,"read_enum","","Read an enumeration value.",25,null],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,null],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,null],[10,"read_struct","","Read an struct value.",25,null],[10,"read_struct_field","","Read a field for a struct value.",25,null],[10,"read_tuple","","Read a tuple value.",25,null],[10,"read_tuple_arg","","Read a data item for a tuple.",25,null],[10,"read_tuple_struct","","Read a tuple struct value.",25,null],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,null],[10,"read_option","","Read an optional value.",25,null],[10,"read_seq","","Read a sequence of values.",25,null],[10,"read_seq_elt","","Read an element in the sequence.",25,null],[10,"read_map","","Read an associative container (map).",25,null],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,null],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,null],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,null],[10,"emit_usize","","Emit a usize value.",26,null],[10,"emit_u64","","Emit a u64 value.",26,null],[10,"emit_u32","","Emit a u32 value.",26,null],[10,"emit_u16","","Emit a u16 value.",26,null],[10,"emit_u8","","Emit a u8 value.",26,null],[10,"emit_isize","","Emit a isize value.",26,null],[10,"emit_i64","","Emit a i64 value.",26,null],[10,"emit_i32","","Emit a i32 value.",26,null],[10,"emit_i16","","Emit a i16 value.",26,null],[10,"emit_i8","","Emit a i8 value.",26,null],[10,"emit_bool","","Emit a bool value.",26,null],[10,"emit_f64","","Emit a f64 value.",26,null],[10,"emit_f32","","Emit a f32 value.",26,null],[10,"emit_char","","Emit a char value.",26,null],[10,"emit_str","","Emit a string value.",26,null],[10,"emit_enum","","Emit an enumeration value.",26,null],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,null],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,null],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,null],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,null],[10,"emit_struct","","Emit a struct value.",26,null],[10,"emit_struct_field","","Emit a field item for a struct.",26,null],[10,"emit_tuple","","Emit a tuple value.",26,null],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,null],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,null],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,null],[10,"emit_option","","Emit an optional value.",26,null],[10,"emit_option_none","","Emit the `None` optional value.",26,null],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,null],[10,"emit_seq","","Emit a sequence of values.",26,null],[10,"emit_seq_elt","","Emit an element in a sequence.",26,null],[10,"emit_map","","Emit an associative container (map).",26,null],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,null],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,null],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,null],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,null],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
initSearch(searchIndex);
